8.1

@startuml
title __Erste Normalform (1ONF)__
skinparam classAttributeIconSize 0
class Abo{
-Beginn: long
-Gebuehr: long
-Art: int
}
class Kunde{
-KfzKennzeichen: String
-Adresse: String
-Firma: boolean
}
class ParkAuto {
-platzNr: int
-parkBeginn: long
-parkEnde: long
-parkDauer: int
-parkGebuehr: int
-bezahlArt: int
+ParkAuto()
}
Kunde -- ParkAuto
Kunde -- Abo

@enduml

________________________________________________________________________________________________________________
@startuml
title __Zweite Normalform (2ONF)__
skinparam classAttributeIconSize 0
class Abo{
-Beginn: long
-Gebuehr: long
-Art: int
}
class Kunde{
-Adresse: String
-Firma: boolean
+buyAbo(): void
+parkeAuto(): void


}
class ParkAuto {
-parkBeginn: long
-parkEnde: long
-parkDauer: int
-parkGebuehr: int
-bezahlArt: int
+bezahlen(): boolean
}
class Auto{
-KfzKennzeichen: String
}
class Parkplatz{
-Nummer: int
}
ParkAuto -down-> Parkplatz
Kunde -- ParkAuto
Kunde -right-> Abo
Kunde -left-> Auto
Abo -down-> Parkplatz

@enduml
________________________________________________________________________________________________________________
@startuml
title __Dritte Normalform (3ONF)__
skinparam classAttributeIconSize 0
class Abo{
-Beginn: long
-Gebuehr: long
-Art: int
}
class Kunde{
-Adresse: String
-Firma: boolean
+buyAbo(): void
+parkeAuto(): void


}
class ParkAuto {
-parkGebuehr: int
-bezahlArt: int
+bezahlen(): boolean
}
class ParkTimeInfo{
-parkBeginn: long
-parkEnde: long
-parkDauer: int

}
class Auto{
-KfzKennzeichen: String
}
class Parkplatz{
-Nummer: int
}
ParkAuto -right-> Parkplatz
ParkAuto -down-> ParkTimeInfo
Kunde -- ParkAuto
Kunde -right-> Abo
Kunde -left-> Auto
Abo -down-> Parkplatz

@enduml
________________________________________________________________________________________________________________
8.3

List<Auto> autos = Arrays.asList(a1,a2,a3,a4,a5); 
autos.stream()   
.filter(a -> a.kunde().istFirma())
.filter(a -> a.hatTurbo())
.mapToInt(a -> a.parkdauer()*Parkhaus.gebühr())
.reduce(0,(x,y) -> x+y);



List<Auto> autos = Arrays.asList(a1,a2,a3,a4,a5); 
autos.stream()
.filter(a -> a.kunde().istFirma())
.filter(a -> a.parkdauer()>=(24*60))
.map(a -> a.kunde());

________________________________________________________________________________________________________________
8.4

public int sumKurse(){
return kurse.stream()
.mapToInt(k -> k.gebühr())
.reduce(0,(x,y)-> x+y);
}


public int sumStudenten(){
return studenten.stream()
.filter(s -> s.istBerufstätig())
.mapToInt(s -> s.kurse.stream().mapToInt(k -> k.gebühr()).reduce(0,(x,y) -> x+y))
.reduce(0,(x,y)->x+y);
}


public double avg(){
return kurse.stream()
.filter(k -> k.hatZertifikat())
.filter(k -> k.ECTS > 4)
.mapToInt(k -> k.gebühr())
.reduce(0,(x,y)->(x+y)/2);
}

